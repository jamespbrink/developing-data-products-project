simDistMean <- mean(meanData$x)
simDistMean
g <- ggplot(meanData, aes(x=x))
g <- g + geom_histogram(fill="#CCFFCC", color="black", binwidth=0.15)
g <- g + stat_function(fun = dnorm, arg = list(sd = simDistSd, mean = simDistMean))
g
simDistSd <- sd(meanData$x)
simDistSd
g <- ggplot(meanData, aes(x=x))
g <- g + geom_histogram(fill="#CCFFCC", color="black", binwidth=0.15)
g <- g + stat_function(fun = dnorm, arg = list(sd = simDistSd, mean = simDistMean))
g
simDistMean
g <- ggplot(meanData, aes(x=x))
g <- g + geom_histogram(aes(y=..density..),fill="#CCFFCC", color="black", binwidth=0.15)
g <- g + stat_function(fun = dnorm, arg = list(sd = simDistSd, mean = simDistMean))
g
g <- ggplot(meanData, aes(x=x))
g <- g + geom_histogram(aes(y=..density..), fill="#CCFFCC", color="black", binwidth=0.15)
g <- g + stat_function(fun = dnorm, arg = list(sd = simDistSd, mean = simDistMean))
g
g <- ggplot(meanData, aes(x=x))
g <- g + geom_histogram(aes(y=..density..), fill="#CCFFCC", color="black", binwidth=0.15)
g <- g + stat_function(fun = dnorm, arg = list(sd = simDistSd, mean = simDistMean))
g
g <- g + geom_line()
g
g <- g + geom_line(aes(y))
g
g <- NULL
?geom_line
g <- ggplot(meanData, aes(x=x))
g <- g + geom_histogram(aes(y=..density..), fill="#CCFFCC", color="black", binwidth=0.15)
g <- g + stat_density(color="red", geom="line", position="identity")
g <- g + stat_function(fun = dnorm, arg = list(sd = simDistSd, mean = simDistMean))
g
qnorm(.975)
5 + c(-1,1)*1.96*((1/lambda)/sqrt(40))
5 + c(-1,1)*1.96*((simDistSd)/sqrt(40))
meanData[4.76 < x < 5.23]
meanData[4.76 < x & x < 5.23]
meanData[x==5]
meanData[x==5,]
meanData[meanData$x==5,]
meanData[meanData$x==4.866028,]
meanData[meanData$x>4,]
meanData[meanData$x > 4.76 & meanData$x < 5.23,]
length(meanData[meanData$x > 4.76 & meanData$x < 5.23,])
cuts <- simDistMean + c(-1,1)*1.96*((1/lambda)/sqrt(40))
length(meanData[meanData$x > cuts[1] & meanData$x < cuts[2],]) / nrow(meanData)
cuts <- theoDistMean + c(-1,1)*1.96*((1/lambda)/sqrt(40))
length(meanData[meanData$x > cuts[1] & meanData$x < cuts[2],]) / nrow(meanData)
install.packages("pdflatex")
install.packages("xelatex")
Sys.which('texi2dvi')
library(datasets)
ToothGrowth
library(reshape)
melt(ToothGrowth)
table(supp,dose)
g <- ggplot(aes(x=supp, y=len), data=ToothGrowth)
g <- g + geom_boxplot(aes(fill=supp))
g <- g + ylab("Tooth Length") + xlab("Delivery Method")
g
library(ggplot2)
g <- ggplot(aes(x=supp, y=len), data=ToothGrowth)
g <- g + geom_boxplot(aes(fill=supp))
g <- g + ylab("Tooth Length") + xlab("Delivery Method")
g
summary(ToothGrowth)
tg <- group_by(supp, ToothGrowth)
library(dplyr)
tg <- group_by(supp, ToothGrowth)
tg <- group_by(ToothGrowth, supp)
summarize(tg)
tg
summarize(tg, mean=mean(len))
tg <- group_by(ToothGrowth, supp, dose)
summarize(tg, mean=mean(len))
tg <- group_by(ToothGrowth, supp, dose)
tg <- summarize(tg, mean=mean(len))
g <- ggplot(aes(x=dose, y=mean))
g <- g + geom_line(aes(color=supp))
g
tg <- group_by(ToothGrowth, supp, dose)
tg <- summarize(tg, mean=mean(len))
g <- ggplot(aes(x=dose, y=mean), data=tg)
g <- g + geom_line(aes(color=supp))
g
g <- ggplot(aes(x=dose, y=len), data=ToothGrowth)
g <- g + geom_line(aes(color=supp))
g
g <- ggplot(aes(x=dose, y=len), data=ToothGrowth)
g <- g + geom_point(aes(color=supp))
g
g <- ggplot(aes(x=dose, y=len), data=ToothGrowth)
g <- g + geom_point(aes(color=supp))
g <- g + geom_smooth(aes(color=supp))
g
tg <- group_by(TeethGrowth, supp)
tg <- summarize(tg, var=var(len))
tg
tg <- group_by(ToothGrowth, supp)
tg <- summarize(tg, var=var(len))
tg
t.test(ToothGrowth$len[ToothGrowth$supp=="OJ"], ToothGrowth$len[ToothGrowth$supp=="VC"], paired=FALSE, var.equal=FALSE)
View(matrixtwo)
t.test(len~dose, data=ToothGrowth, paired=FALSE, var.equal=TRUE)
class(ToothGrowth$does)
class(ToothGrowth$dose)
ToothGrowth[ToothGrowth$dose==0.5 | ToothGrowth$dose==1.0]
ToothGrowth[ToothGrowth$dose==0.5 | ToothGrowth$dose==1.0,]
mat <- matrix(1:4)
mat
mat <- matrix(1:4, 2,2)
mat
solve(mat, ...)
x_inv <- solve(mat, ...)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(x~y)
?lm
?t.test
fit <- lm(x~y)
fit <- lm(y~x)
summary(fit)
fit <- lm(x~y)
summary(fit)
fit <- lm(y~x)
resid(fit)
sd(resid(fit))
fit <- lm(x~y)
resid(fit)
sd(resid(fit))
fit <- lm(y~x)
summary(fit)$sigma
mtcars
fit <- lm(mtcars$mpg ~ mtcars$wt)
coef <- summary(fit)$coefficients
coef
coef[1,1] + c(-1,1)*qt(.975, df= fit$df)*coef[1,2]
fit <- lm(mtcars$wt ~ mtcars$mpg)
coef <- summary(fit)$coefficients
coef[1,1] + c(-1,1)*qt(.975, df= fit$df)*coef[1,2]
fit <- lm(mtcars$mpg ~ mtcars$wt)
coef <- summary(fit)$coefficients
coef[1,1] + c(-1,1)*qt(.975, df= fit$df)*coef[1,2]
coef[2,1] + c(-1,1)*qt(.975, df= fit$df)*coef[2,2]
?mtcars
coef
41.11975 + -4.202635*3
?predict
predict(fit, data.frame(x=3), interval="prediction")
x <- mtcars$wt
y <- mycars$mpg
y <- mtcars$mpg
fit <- lm(y~x)
predict(fit, data.frame(x=3), interval="prediction")
?I
fit2 <- lm(y~I(x/2))
summary(fit2)
I(x/2)
x
library(datasets)
data(swiss)
require(stats)
require(graphics)
?swiss
summary(lm(Fertility ~ ., data=swiss))
summary(lm(Fertility ~ Agriculture, data=swiss))
z <- swiss$Agriculture + swiss$Education
lm(Fertility ~ .+z, data=swiss)
?relevel
install.packages("IBrokers")
library(IBrokers)
tws <- twsConnect()
reqCurrentTime(tws)
?reqMktData
?twsContract
?twsSTK
stock <- twsSTK("AAPL")
reqMktData(tws, stock)
reqMktDepth(tws, stock)
reqMktDepth(tws, stock)
tws <- twsConnect()
stock <- twsSTK("AAPL")
reqMktData(tws, stock)
test <- reqMktData(tws, stock)
test
mtcars
class(mtcars$cyl)
mtcars$cyl <- factor(mtcars$cyl)
class(mtcars$cyl)
mtcars
class(mtcars$cyl)
fit <- lm(mpg ~ cyl + wt, data=mtcars)
fit
plot(fit)
fit <- lm(mpg ~ cyl, data=mtcars)
fit
fit1 <- lm(mpg ~ cyl + wt, data=mtcars)
fit2 <- lm(mpg ~ cyl * wt, data=mtcars)
summart(fit1)
summary(fit1)
summary(fit2)
fit2 <- lm(mpg ~ cyl + wt + cyl*wt)
fit2 <- lm(mpg ~ cyl + wt + cyl*wt, data=mtcars)
summary(fit2)
summary(fit1)
lm(mpg~I(wt * 0.5)+cyl, data=mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
?influence.measures
fit <- lm(y~x)
influence.measures(fit)
-1.34e+02
library(devtools)
install.packages("devtools")
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("base64enc")
install_github("ramnathv/rCharts@dev")
library(manipulate)
myPlot <- function(s) {}
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), scars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0,2,step=0.1))
?manipulate
manipulate(myPlot, s = slider(0,2,step=0.1))
manipulate(myPlot(s), slider = x(0,2,step=0.1))
manipulate(myPlot(s), x.s = slider(0,2,step=0.1))
manipulate(myPlot(s), s = slider(0,2,step=0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0,2,step=0.1))
manipulate(myPlot, s = slider(0,2,step=0.1))
manipulate(myPlot(s), x.s = slider(0,2,step=0.1))
airquality
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
swirl()
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gpa_nor, pch_nor)
l_nor <- lm(gpa_nor ~ pch_nor)
l_nor <- lm(gpa_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
swirl()
library(swirl)
swirl()
fit <- lm(child ~ parent, galton)
sum(fit$residuals^2)/n-2
sqrt(sum(fit$residuals^2)/n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-(sRes/sTot)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(child, parent, galton)^2
cor(galton$child, galton$parent)
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child~ones+parent-1, galton)
lm(child~parent, galton)
lm(child~1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling)
""
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[intrain,]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
head(training)
qplot(CompressiveStrength, Cement)
qplot(CompressiveStrength, Cement, data=testing)
qplot(CompressiveStrength, BlasFurnaceSlag, data=testing)
qplot(CompressiveStrength, BlastFurnaceSlag, data=testing)
qplot(CompressiveStrength, FlyAsh, data=testing)
qplot(CompressiveStrength, Water, data=testing)
qplot(CompressiveStrength, Superpasticizer, data=testing)
qplot(CompressiveStrength, Superplasticizer, data=testing)
qplot(CompressiveStrength, CoarseAggregate, data=testing)
qplot(CompressiveStrength, FineAggregate, data=testing)
qplot(CompressiveStrength, Age, data=testing)
qplot(CompressiveStrength, index, data=testing)
featurePlot(x=training[,-CompressiveStrength], y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,-9], y=training$CompressiveStrength, plot="pairs")
index <- seq_along(1:nrow(training))
ggplot(data=training, aes(x=index, y=CompressiveStrength)) +geom_point()+theme_bw()
qplot(CompressiveStrength, Age, data=testing)
training
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p=0.75)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
names(training)
var <- grep("^IL", names(training))
var
training[,var]
preProc <- preProcess(training[,var], method="pca", pcaComp=2)
names(training)
trainPC <- predict(preProc, training[,var])
modelFit <- train(training$diagnosis ~ var, method="glm", data=trainPC)
preProc <- preProcess(training[, var], method="pca", thresh=0.9)
preProc$rotation
preProc <- preProcess(training[, var], method="pca", thresh=0.8)
var
var <- c(1, var)
var
training[,1]
names(training)[1]
training <- training[,var]
names(training)
modelFit <- train(diagnosis ~ ., method="glm", preProcess="pca", data=training)
install.packages("e1071")
library(e1071)
modelFit <- train(diagnosis ~ ., method="glm", preProcess="pca", data=training)
testing <- testing[,var]
confusionMatrix(testing$diagnosis,predict(modelFit, testing))
modelFit <- train(diagnosis ~ ., method="glm", data=training)
confusionMatrix(testing$diagnosis,predict(modelFit, testing))
?train
install_github('slidify', 'ramnath')
library(devtools)
install_github('slidify', 'ramnath')
install_github('slidify', 'ramnathv')
data(mtcars)
table(mtcars$cyl)
inTrain <- createDataPartition(y=mtcars$cyl, p0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=mtcars$cyl, p0.7, list=FALSE)
inTrain <- createDataPartition(y=mtcars$cyl, p=0.7, list=FALSE)
training <- mtcars[inTrain,]
testing <- mtcars[-inTrain,]
qplot(mpg, wt, color=cyl, data=training)
modFit <- train(cyl ~ ., method="rpart", data=training)
print(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
?fancyRpartPlot
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.4)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.4)
modFit <- train(wt ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.6)
data(iris)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species~., data=training, method"rf", prox=TRUE)
modFit <- train(Species~., data=training, method="rf", prox=TRUE)
modFit <- train(Species~., data=training, method="rf", prox=TRUE)
modFit
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
set.seed(125)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
fit <- train(Cell~., method="rpart")
fit <- train(Cell~., method="rpart" data=training)
fit <- train(Cell~., method="rpart", data=training)
?predict
fit <- train(Class~., method="rpart", data=training)
fit$finalModel
newdata <- list("TotalIntenCh2" = 23000, "FiberWidthCh1" =10, "PerimStatusCh1"=2 )
newdata
predict(fit, newdata)
fit <- train(Class~., method="rpart", data=training)
newdata <- list("TotalIntenCh2" = 23000, "FiberWidthCh1" =10, "PerimStatusCh1"=2 )
predict(fit, newdata)
predict(fit$finalModel, newdata)
predict(fit, testing)
testing1 <- cbind(predict(fit, testing), testing)
head(testing1)
names(testing1)[1] <- val
names(testing1)[1] <- "val"
names(testing1)
?sqldf
library(sqldf)
?sqldf
sqldf("SELECT val FROM testing1 WHERE TotalIntecnCh2 = 23000 AND FiberWidthCh1 = 10 AND PerimStatusCh1=2")
sqldf("SELECT val FROM testing1 WHERE TotalIntenCh2 = 23000 AND FiberWidthCh1 = 10 AND PerimStatusCh1=2")
answer <- testing1[testing1$TotalIntenCh2==23000 & testing1$FiberWidthCh1==10 & PerimStatusCh1=2,]
answer <- testing1[testing1$TotalIntenCh2==23000 & testing1$FiberWidthCh1==10 & PerimStatusCh1==2,]
answer <- testing1[testing1$TotalIntenCh2==23000 & testing1$FiberWidthCh1==10 & testing1$PerimStatusCh1==2,]
answer[,1]
answer
fit$finalModel
library(rattle)
fancyRpartPlot(fit$finalModel)
plot(fit$finalModel, uniform=TRUE)
text(fit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
fit <- train(Area~., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(fit, newdata)
head(olve)
head(olive)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=FALSE)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
names(SAheart)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", data=trainSA, family="binomial")
length(trainSA)
trainSA
trainPred <- predict(fit, trainSA)
testPred <- predict(fit, testSA)
missClass <- function(values, prediction){sum(((prediction>0.5)*1)!= values)/length(values)}
trainmc <- missClass(trainSA$chd, trainPred)
trainmc
trainmc <- missClass(testSA$chd, testPred)
trainmc
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
head(vowel.train)
vowel.train[,1] <- factor(vowel.train[,1])
vowel.test[,1] <- factor(vowel.test[,1])
set.seed(33833)
fit <- train(y~., data=vowel.train, method="rf")
?varImp
varImp(fit)
varImp(fit$finalModel)
vi <- varImp(fit$finalModel)
vi[order(vi$imp)]
vi[order(vi$Overall)]
vi[order(vi[,1])]
class(vi)
vi
names(vi)
vi[order(vi$Overall),]
fit <- train(y~., data=vowel.train, method="rf", tuneGrid=expand.grid(mtry=1))
varImp(fit)
varImp(fit$finalModel)
setwd("~/R/developing-data-products-project")
author("pitch")
library("slidify")
author("pitch")
?author
author("pitch", use_git=FALSE)
setwd("~/.Trash/pitch/pitch")
setwd("~/R/developing-data-products-project")
author("pitch", use_git=FALSE)
setwd("~/R/developing-data-products-project")
deploy()
library(shiny)
deploy()
library(shinyApps)
library(shinyapps)
deploy()
deployApp()
setwd("~/R/developing-data-products-project/pitch")
publish(title = 'Developing Data Products Project Presentation', 'index.html', host='rpubs')
setwd("~/R/developing-data-products-project")
deployApp()
setwd("~/R/developing-data-products-project/pitch")
publish(user = "jamespbrink", repo = "dataproductspresentation")
