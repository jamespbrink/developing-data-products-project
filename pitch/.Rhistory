debug(ls)
ls()
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along =  my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "James")
my_name <- c(my_char, "James")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
cls(cls_list)
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags([, 11:17])
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
?download.file
source('~/R/Spring City/capitalDashboard.R')
data
head(data)
View(data)
dataNYCT <- data[Agency == "New York City Transit",]
date
data
names(data)
dataNYCT <- data[data$Agency == "New York City Transit",]
dataNYCT
?grep
grep("^T604", data)
grep("^T604", dataNYCT$Project.ID)
dataNYCT[stationCons,]
stationCons <- grep("^T604", dataNYCT$Project.ID)
stationData <- dataNYCT[stationCons,]
stationData
View(stationData)
View(stationData)
swirl()
library(swirl)
swirl
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
?est
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(slidify)
install_github("slidify", "ramnathv")
install.packages("devtools")
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
slidify("index.Rmd")
library(slidify)
library(slidifyLibraries)
slidify("index.Rmd")
setwd("~/R/developing-data-products-project/pitch")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
